{"dependencies":[{"name":"@angular/compiler","loc":{"line":6,"column":453}},{"name":"@angular/core","loc":{"line":7,"column":828}},{"name":"@angular/common","loc":{"line":8,"column":37}},{"name":"@angular/platform-browser","loc":{"line":9,"column":53}},{"name":"tslib","loc":{"line":10,"column":26}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ɵa = exports.ɵResourceLoaderImpl = exports.ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS = exports.ɵplatformCoreDynamic = exports.ɵCompilerImpl = exports.platformBrowserDynamic = exports.RESOURCE_CACHE_PROVIDER = exports.JitCompilerFactory = exports.VERSION = undefined;\n\nvar _compiler = require(\"@angular/compiler\");\n\nvar _core = require(\"@angular/core\");\n\nvar _common = require(\"@angular/common\");\n\nvar _platformBrowser = require(\"@angular/platform-browser\");\n\nvar _tslib = require(\"tslib\");\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar MODULE_SUFFIX = ''; /**\n                         * @license Angular v5.1.2\n                         * (c) 2010-2017 Google, Inc. https://angular.io/\n                         * License: MIT\n                         */\n\nvar builtinExternalReferences = createBuiltinExternalReferencesMap();\nvar JitReflector = /** @class */function () {\n  function JitReflector() {\n    this.builtinExternalReferences = new Map();\n    this.reflectionCapabilities = new _core.ɵReflectionCapabilities();\n  }\n  /**\n   * @param {?} type\n   * @param {?} cmpMetadata\n   * @return {?}\n   */\n  JitReflector.prototype.componentModuleUrl = /**\n                                              * @param {?} type\n                                              * @param {?} cmpMetadata\n                                              * @return {?}\n                                              */\n  function (type, cmpMetadata) {\n    var /** @type {?} */moduleId = cmpMetadata.moduleId;\n    if (typeof moduleId === 'string') {\n      var /** @type {?} */scheme = (0, _compiler.getUrlScheme)(moduleId);\n      return scheme ? moduleId : \"package:\" + moduleId + MODULE_SUFFIX;\n    } else if (moduleId !== null && moduleId !== void 0) {\n      throw (0, _compiler.syntaxError)(\"moduleId should be a string in \\\"\" + (0, _core.ɵstringify)(type) + \"\\\". See https://goo.gl/wIDDiL for more information.\\n\" + \"If you're using Webpack you should inline the template and the styles, see https://goo.gl/X2J8zc.\");\n    }\n    return \"./\" + (0, _core.ɵstringify)(type);\n  };\n  /**\n   * @param {?} typeOrFunc\n   * @return {?}\n   */\n  JitReflector.prototype.parameters = /**\n                                      * @param {?} typeOrFunc\n                                      * @return {?}\n                                      */\n  function (typeOrFunc) {\n    return this.reflectionCapabilities.parameters(typeOrFunc);\n  };\n  /**\n   * @param {?} typeOrFunc\n   * @return {?}\n   */\n  JitReflector.prototype.annotations = /**\n                                       * @param {?} typeOrFunc\n                                       * @return {?}\n                                       */\n  function (typeOrFunc) {\n    return this.reflectionCapabilities.annotations(typeOrFunc);\n  };\n  /**\n   * @param {?} typeOrFunc\n   * @return {?}\n   */\n  JitReflector.prototype.propMetadata = /**\n                                        * @param {?} typeOrFunc\n                                        * @return {?}\n                                        */\n  function (typeOrFunc) {\n    return this.reflectionCapabilities.propMetadata(typeOrFunc);\n  };\n  /**\n   * @param {?} type\n   * @param {?} lcProperty\n   * @return {?}\n   */\n  JitReflector.prototype.hasLifecycleHook = /**\n                                            * @param {?} type\n                                            * @param {?} lcProperty\n                                            * @return {?}\n                                            */\n  function (type, lcProperty) {\n    return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);\n  };\n  /**\n   * @param {?} ref\n   * @return {?}\n   */\n  JitReflector.prototype.resolveExternalReference = /**\n                                                    * @param {?} ref\n                                                    * @return {?}\n                                                    */\n  function (ref) {\n    return builtinExternalReferences.get(ref) || ref.runtime;\n  };\n  return JitReflector;\n}();\n/**\n * @return {?}\n */\nfunction createBuiltinExternalReferencesMap() {\n  var /** @type {?} */map = new Map();\n  map.set(_compiler.Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS, _core.ANALYZE_FOR_ENTRY_COMPONENTS);\n  map.set(_compiler.Identifiers.ElementRef, _core.ElementRef);\n  map.set(_compiler.Identifiers.NgModuleRef, _core.NgModuleRef);\n  map.set(_compiler.Identifiers.ViewContainerRef, _core.ViewContainerRef);\n  map.set(_compiler.Identifiers.ChangeDetectorRef, _core.ChangeDetectorRef);\n  map.set(_compiler.Identifiers.QueryList, _core.QueryList);\n  map.set(_compiler.Identifiers.TemplateRef, _core.TemplateRef);\n  map.set(_compiler.Identifiers.CodegenComponentFactoryResolver, _core.ɵCodegenComponentFactoryResolver);\n  map.set(_compiler.Identifiers.ComponentFactoryResolver, _core.ComponentFactoryResolver);\n  map.set(_compiler.Identifiers.ComponentFactory, _core.ComponentFactory);\n  map.set(_compiler.Identifiers.ComponentRef, _core.ComponentRef);\n  map.set(_compiler.Identifiers.NgModuleFactory, _core.NgModuleFactory);\n  map.set(_compiler.Identifiers.createModuleFactory, _core.ɵcmf);\n  map.set(_compiler.Identifiers.moduleDef, _core.ɵmod);\n  map.set(_compiler.Identifiers.moduleProviderDef, _core.ɵmpd);\n  map.set(_compiler.Identifiers.RegisterModuleFactoryFn, _core.ɵregisterModuleFactory);\n  map.set(_compiler.Identifiers.Injector, _core.Injector);\n  map.set(_compiler.Identifiers.ViewEncapsulation, _core.ViewEncapsulation);\n  map.set(_compiler.Identifiers.ChangeDetectionStrategy, _core.ChangeDetectionStrategy);\n  map.set(_compiler.Identifiers.SecurityContext, _core.SecurityContext);\n  map.set(_compiler.Identifiers.LOCALE_ID, _core.LOCALE_ID);\n  map.set(_compiler.Identifiers.TRANSLATIONS_FORMAT, _core.TRANSLATIONS_FORMAT);\n  map.set(_compiler.Identifiers.inlineInterpolate, _core.ɵinlineInterpolate);\n  map.set(_compiler.Identifiers.interpolate, _core.ɵinterpolate);\n  map.set(_compiler.Identifiers.EMPTY_ARRAY, _core.ɵEMPTY_ARRAY);\n  map.set(_compiler.Identifiers.EMPTY_MAP, _core.ɵEMPTY_MAP);\n  map.set(_compiler.Identifiers.Renderer, _core.Renderer);\n  map.set(_compiler.Identifiers.viewDef, _core.ɵvid);\n  map.set(_compiler.Identifiers.elementDef, _core.ɵeld);\n  map.set(_compiler.Identifiers.anchorDef, _core.ɵand);\n  map.set(_compiler.Identifiers.textDef, _core.ɵted);\n  map.set(_compiler.Identifiers.directiveDef, _core.ɵdid);\n  map.set(_compiler.Identifiers.providerDef, _core.ɵprd);\n  map.set(_compiler.Identifiers.queryDef, _core.ɵqud);\n  map.set(_compiler.Identifiers.pureArrayDef, _core.ɵpad);\n  map.set(_compiler.Identifiers.pureObjectDef, _core.ɵpod);\n  map.set(_compiler.Identifiers.purePipeDef, _core.ɵppd);\n  map.set(_compiler.Identifiers.pipeDef, _core.ɵpid);\n  map.set(_compiler.Identifiers.nodeValue, _core.ɵnov);\n  map.set(_compiler.Identifiers.ngContentDef, _core.ɵncd);\n  map.set(_compiler.Identifiers.unwrapValue, _core.ɵunv);\n  map.set(_compiler.Identifiers.createRendererType2, _core.ɵcrt);\n  map.set(_compiler.Identifiers.createComponentFactory, _core.ɵccf);\n  return map;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar ERROR_COLLECTOR_TOKEN = new _core.InjectionToken('ErrorCollector');\n/**\n * A default provider for {\\@link PACKAGE_ROOT_URL} that maps to '/'.\n */\nvar DEFAULT_PACKAGE_URL_PROVIDER = {\n  provide: _core.PACKAGE_ROOT_URL,\n  useValue: '/'\n};\nvar _NO_RESOURCE_LOADER = {\n  get: /**\n       * @param {?} url\n       * @return {?}\n       */\n  function (url) {\n    throw new Error(\"No ResourceLoader implementation has been provided. Can't read the url \\\"\" + url + \"\\\"\");\n  }\n};\nvar baseHtmlParser = new _core.InjectionToken('HtmlParser');\nvar CompilerImpl = /** @class */function () {\n  function CompilerImpl(injector, _metadataResolver, templateParser, styleCompiler, viewCompiler, ngModuleCompiler, summaryResolver, compileReflector, compilerConfig, console) {\n    this._metadataResolver = _metadataResolver;\n    this._delegate = new _compiler.JitCompiler(_metadataResolver, templateParser, styleCompiler, viewCompiler, ngModuleCompiler, summaryResolver, compileReflector, compilerConfig, console, this.getExtraNgModuleProviders.bind(this));\n    this.injector = injector;\n  }\n  /**\n   * @return {?}\n   */\n  CompilerImpl.prototype.getExtraNgModuleProviders = /**\n                                                     * @return {?}\n                                                     */\n  function () {\n    return [this._metadataResolver.getProviderMetadata(new _compiler.ProviderMeta(_core.Compiler, { useValue: this }))];\n  };\n  /**\n   * @template T\n   * @param {?} moduleType\n   * @return {?}\n   */\n  CompilerImpl.prototype.compileModuleSync = /**\n                                             * @template T\n                                             * @param {?} moduleType\n                                             * @return {?}\n                                             */\n  function (moduleType) {\n    return (/** @type {?} */this._delegate.compileModuleSync(moduleType)\n    );\n  };\n  /**\n   * @template T\n   * @param {?} moduleType\n   * @return {?}\n   */\n  CompilerImpl.prototype.compileModuleAsync = /**\n                                              * @template T\n                                              * @param {?} moduleType\n                                              * @return {?}\n                                              */\n  function (moduleType) {\n    return (/** @type {?} */this._delegate.compileModuleAsync(moduleType)\n    );\n  };\n  /**\n   * @template T\n   * @param {?} moduleType\n   * @return {?}\n   */\n  CompilerImpl.prototype.compileModuleAndAllComponentsSync = /**\n                                                             * @template T\n                                                             * @param {?} moduleType\n                                                             * @return {?}\n                                                             */\n  function (moduleType) {\n    var /** @type {?} */result = this._delegate.compileModuleAndAllComponentsSync(moduleType);\n    return {\n      ngModuleFactory: /** @type {?} */result.ngModuleFactory,\n      componentFactories: /** @type {?} */result.componentFactories\n    };\n  };\n  /**\n   * @template T\n   * @param {?} moduleType\n   * @return {?}\n   */\n  CompilerImpl.prototype.compileModuleAndAllComponentsAsync = /**\n                                                              * @template T\n                                                              * @param {?} moduleType\n                                                              * @return {?}\n                                                              */\n  function (moduleType) {\n    return this._delegate.compileModuleAndAllComponentsAsync(moduleType).then(function (result) {\n      return {\n        ngModuleFactory: /** @type {?} */result.ngModuleFactory,\n        componentFactories: /** @type {?} */result.componentFactories\n      };\n    });\n  };\n  /**\n   * @param {?} summaries\n   * @return {?}\n   */\n  CompilerImpl.prototype.loadAotSummaries = /**\n                                            * @param {?} summaries\n                                            * @return {?}\n                                            */\n  function (summaries) {\n    this._delegate.loadAotSummaries(summaries);\n  };\n  /**\n   * @param {?} ref\n   * @return {?}\n   */\n  CompilerImpl.prototype.hasAotSummary = /**\n                                         * @param {?} ref\n                                         * @return {?}\n                                         */\n  function (ref) {\n    return this._delegate.hasAotSummary(ref);\n  };\n  /**\n   * @template T\n   * @param {?} component\n   * @return {?}\n   */\n  CompilerImpl.prototype.getComponentFactory = /**\n                                               * @template T\n                                               * @param {?} component\n                                               * @return {?}\n                                               */\n  function (component) {\n    return (/** @type {?} */this._delegate.getComponentFactory(component)\n    );\n  };\n  /**\n   * @return {?}\n   */\n  CompilerImpl.prototype.clearCache = /**\n                                      * @return {?}\n                                      */\n  function () {\n    this._delegate.clearCache();\n  };\n  /**\n   * @param {?} type\n   * @return {?}\n   */\n  CompilerImpl.prototype.clearCacheFor = /**\n                                         * @param {?} type\n                                         * @return {?}\n                                         */\n  function (type) {\n    this._delegate.clearCacheFor(type);\n  };\n  return CompilerImpl;\n}();\n/**\n * A set of providers that provide `JitCompiler` and its dependencies to use for\n * template compilation.\n */\nvar COMPILER_PROVIDERS = /** @type {?} */[{ provide: _compiler.CompileReflector, useValue: new JitReflector() }, { provide: _compiler.ResourceLoader, useValue: _NO_RESOURCE_LOADER }, { provide: _compiler.JitSummaryResolver, deps: [] }, { provide: _compiler.SummaryResolver, useExisting: _compiler.JitSummaryResolver }, { provide: _core.ɵConsole, deps: [] }, { provide: _compiler.Lexer, deps: [] }, { provide: _compiler.Parser, deps: [_compiler.Lexer] }, {\n  provide: baseHtmlParser,\n  useClass: _compiler.HtmlParser,\n  deps: []\n}, {\n  provide: _compiler.I18NHtmlParser,\n  useFactory: function (parser, translations, format, config, console) {\n    translations = translations || '';\n    var /** @type {?} */missingTranslation = translations ? /** @type {?} */config.missingTranslation : _core.MissingTranslationStrategy.Ignore;\n    return new _compiler.I18NHtmlParser(parser, translations, format, missingTranslation, console);\n  },\n  deps: [baseHtmlParser, [new _core.Optional(), new _core.Inject(_core.TRANSLATIONS)], [new _core.Optional(), new _core.Inject(_core.TRANSLATIONS_FORMAT)], [_compiler.CompilerConfig], [_core.ɵConsole]]\n}, {\n  provide: _compiler.HtmlParser,\n  useExisting: _compiler.I18NHtmlParser\n}, {\n  provide: _compiler.TemplateParser, deps: [_compiler.CompilerConfig, _compiler.CompileReflector, _compiler.Parser, _compiler.ElementSchemaRegistry, _compiler.I18NHtmlParser, _core.ɵConsole]\n}, { provide: _compiler.DirectiveNormalizer, deps: [_compiler.ResourceLoader, _compiler.UrlResolver, _compiler.HtmlParser, _compiler.CompilerConfig] }, { provide: _compiler.CompileMetadataResolver, deps: [_compiler.CompilerConfig, _compiler.HtmlParser, _compiler.NgModuleResolver, _compiler.DirectiveResolver, _compiler.PipeResolver, _compiler.SummaryResolver, _compiler.ElementSchemaRegistry, _compiler.DirectiveNormalizer, _core.ɵConsole, [_core.Optional, _compiler.StaticSymbolCache], _compiler.CompileReflector, [_core.Optional, ERROR_COLLECTOR_TOKEN]] }, DEFAULT_PACKAGE_URL_PROVIDER, { provide: _compiler.StyleCompiler, deps: [_compiler.UrlResolver] }, { provide: _compiler.ViewCompiler, deps: [_compiler.CompileReflector] }, { provide: _compiler.NgModuleCompiler, deps: [_compiler.CompileReflector] }, { provide: _compiler.CompilerConfig, useValue: new _compiler.CompilerConfig() }, { provide: _core.Compiler, useClass: CompilerImpl, deps: [_core.Injector, _compiler.CompileMetadataResolver, _compiler.TemplateParser, _compiler.StyleCompiler, _compiler.ViewCompiler, _compiler.NgModuleCompiler, _compiler.SummaryResolver, _compiler.CompileReflector, _compiler.CompilerConfig, _core.ɵConsole] }, { provide: _compiler.DomElementSchemaRegistry, deps: [] }, { provide: _compiler.ElementSchemaRegistry, useExisting: _compiler.DomElementSchemaRegistry }, { provide: _compiler.UrlResolver, deps: [_core.PACKAGE_ROOT_URL] }, { provide: _compiler.DirectiveResolver, deps: [_compiler.CompileReflector] }, { provide: _compiler.PipeResolver, deps: [_compiler.CompileReflector] }, { provide: _compiler.NgModuleResolver, deps: [_compiler.CompileReflector] }];\n/**\n * \\@experimental\n */\nvar JitCompilerFactory = /** @class */function () {\n  /* @internal */\n  function JitCompilerFactory(defaultOptions) {\n    var /** @type {?} */compilerOptions = {\n      useJit: true,\n      defaultEncapsulation: _core.ViewEncapsulation.Emulated,\n      missingTranslation: _core.MissingTranslationStrategy.Warning,\n      enableLegacyTemplate: false\n    };\n    this._defaultOptions = [compilerOptions].concat(defaultOptions);\n  }\n  /**\n   * @param {?=} options\n   * @return {?}\n   */\n  JitCompilerFactory.prototype.createCompiler = /**\n                                                * @param {?=} options\n                                                * @return {?}\n                                                */\n  function (options) {\n    if (options === void 0) {\n      options = [];\n    }\n    var /** @type {?} */opts = _mergeOptions(this._defaultOptions.concat(options));\n    var /** @type {?} */injector = _core.Injector.create([COMPILER_PROVIDERS, {\n      provide: _compiler.CompilerConfig,\n      useFactory: function () {\n        return new _compiler.CompilerConfig({\n          // let explicit values from the compiler options overwrite options\n          // from the app providers\n          useJit: opts.useJit,\n          jitDevMode: (0, _core.isDevMode)(),\n          // let explicit values from the compiler options overwrite options\n          // from the app providers\n          defaultEncapsulation: opts.defaultEncapsulation,\n          missingTranslation: opts.missingTranslation,\n          enableLegacyTemplate: opts.enableLegacyTemplate,\n          preserveWhitespaces: opts.preserveWhitespaces\n        });\n      },\n      deps: []\n    },\n    /** @type {?} */opts.providers]);\n    return injector.get(_core.Compiler);\n  };\n  return JitCompilerFactory;\n}();\n/**\n * @param {?} optionsArr\n * @return {?}\n */\nfunction _mergeOptions(optionsArr) {\n  return {\n    useJit: _lastDefined(optionsArr.map(function (options) {\n      return options.useJit;\n    })),\n    defaultEncapsulation: _lastDefined(optionsArr.map(function (options) {\n      return options.defaultEncapsulation;\n    })),\n    providers: _mergeArrays(optionsArr.map(function (options) {\n      return options.providers;\n    })),\n    missingTranslation: _lastDefined(optionsArr.map(function (options) {\n      return options.missingTranslation;\n    })),\n    enableLegacyTemplate: _lastDefined(optionsArr.map(function (options) {\n      return options.enableLegacyTemplate;\n    })),\n    preserveWhitespaces: _lastDefined(optionsArr.map(function (options) {\n      return options.preserveWhitespaces;\n    }))\n  };\n}\n/**\n * @template T\n * @param {?} args\n * @return {?}\n */\nfunction _lastDefined(args) {\n  for (var /** @type {?} */i = args.length - 1; i >= 0; i--) {\n    if (args[i] !== undefined) {\n      return args[i];\n    }\n  }\n  return undefined;\n}\n/**\n * @param {?} parts\n * @return {?}\n */\nfunction _mergeArrays(parts) {\n  var /** @type {?} */result = [];\n  parts.forEach(function (part) {\n    return part && result.push.apply(result, part);\n  });\n  return result;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A platform that included corePlatform and the compiler.\n *\n * \\@experimental\n */\nvar platformCoreDynamic = (0, _core.createPlatformFactory)(_core.platformCore, 'coreDynamic', [{ provide: _core.COMPILER_OPTIONS, useValue: {}, multi: true }, { provide: _core.CompilerFactory, useClass: JitCompilerFactory, deps: [_core.COMPILER_OPTIONS] }]);\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar ResourceLoaderImpl = /** @class */function (_super) {\n  (0, _tslib.__extends)(ResourceLoaderImpl, _super);\n  function ResourceLoaderImpl() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * @param {?} url\n   * @return {?}\n   */\n  ResourceLoaderImpl.prototype.get = /**\n                                     * @param {?} url\n                                     * @return {?}\n                                     */\n  function (url) {\n    var /** @type {?} */resolve;\n    var /** @type {?} */reject;\n    var /** @type {?} */promise = new Promise(function (res, rej) {\n      resolve = res;\n      reject = rej;\n    });\n    var /** @type {?} */xhr = new XMLHttpRequest();\n    xhr.open('GET', url, true);\n    xhr.responseType = 'text';\n    xhr.onload = function () {\n      // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n      // response/responseType properties were introduced in ResourceLoader Level2 spec (supported\n      // by IE10)\n      var /** @type {?} */response = xhr.response || xhr.responseText;\n      // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n      var /** @type {?} */status = xhr.status === 1223 ? 204 : xhr.status;\n      // fix status code when it is 0 (0 status is undocumented).\n      // Occurs when accessing file resources or on Android 4.1 stock browser\n      // while retrieving files from application cache.\n      if (status === 0) {\n        status = response ? 200 : 0;\n      }\n      if (200 <= status && status <= 300) {\n        resolve(response);\n      } else {\n        reject(\"Failed to load \" + url);\n      }\n    };\n    xhr.onerror = function () {\n      reject(\"Failed to load \" + url);\n    };\n    xhr.send();\n    return promise;\n  };\n  ResourceLoaderImpl.decorators = [{ type: _core.Injectable }];\n  /** @nocollapse */\n  ResourceLoaderImpl.ctorParameters = function () {\n    return [];\n  };\n  return ResourceLoaderImpl;\n}(_compiler.ResourceLoader);\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS = [_platformBrowser.ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS, {\n  provide: _core.COMPILER_OPTIONS,\n  useValue: { providers: [{ provide: _compiler.ResourceLoader, useClass: ResourceLoaderImpl, deps: [] }] },\n  multi: true\n}, { provide: _core.PLATFORM_ID, useValue: _common.ɵPLATFORM_BROWSER_ID }];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An implementation of ResourceLoader that uses a template cache to avoid doing an actual\n * ResourceLoader.\n *\n * The template cache needs to be built and loaded into window.$templateCache\n * via a separate mechanism.\n */\nvar CachedResourceLoader = /** @class */function (_super) {\n  (0, _tslib.__extends)(CachedResourceLoader, _super);\n  function CachedResourceLoader() {\n    var _this = _super.call(this) || this;\n    _this._cache = /** @type {?} */_core.ɵglobal.$templateCache;\n    if (_this._cache == null) {\n      throw new Error('CachedResourceLoader: Template cache was not found in $templateCache.');\n    }\n    return _this;\n  }\n  /**\n   * @param {?} url\n   * @return {?}\n   */\n  CachedResourceLoader.prototype.get = /**\n                                       * @param {?} url\n                                       * @return {?}\n                                       */\n  function (url) {\n    if (this._cache.hasOwnProperty(url)) {\n      return Promise.resolve(this._cache[url]);\n    } else {\n      return (/** @type {?} */Promise.reject('CachedResourceLoader: Did not find cached template for ' + url)\n      );\n    }\n  };\n  return CachedResourceLoader;\n}(_compiler.ResourceLoader);\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n/**\n * \\@stable\n */\nvar VERSION = new _core.Version('5.1.2');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@experimental\n */\nvar RESOURCE_CACHE_PROVIDER = [{ provide: _compiler.ResourceLoader, useClass: CachedResourceLoader, deps: [] }];\n/**\n * \\@stable\n */\nvar platformBrowserDynamic = (0, _core.createPlatformFactory)(platformCoreDynamic, 'browserDynamic', INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\nexports.VERSION = VERSION;\nexports.JitCompilerFactory = JitCompilerFactory;\nexports.RESOURCE_CACHE_PROVIDER = RESOURCE_CACHE_PROVIDER;\nexports.platformBrowserDynamic = platformBrowserDynamic;\nexports.ɵCompilerImpl = CompilerImpl;\nexports.ɵplatformCoreDynamic = platformCoreDynamic;\nexports.ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS = INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS;\nexports.ɵResourceLoaderImpl = ResourceLoaderImpl;\nexports.ɵa = CachedResourceLoader;\n//# sourceMappingURL=platform-browser-dynamic.js.map"},"hash":"92eeb407f69f26c8b43ebcab5a8e3c40"}