{"dependencies":[{"name":"@angular/core","loc":{"line":11,"column":71}},{"name":"rxjs/BehaviorSubject","loc":{"line":12,"column":53}},{"name":"rxjs/Observable","loc":{"line":13,"column":43}},{"name":"rxjs/Subject","loc":{"line":14,"column":37}},{"name":"rxjs/scheduler/queue","loc":{"line":15,"column":33}},{"name":"rxjs/operator/observeOn","loc":{"line":16,"column":41}},{"name":"rxjs/operator/withLatestFrom","loc":{"line":17,"column":51}},{"name":"rxjs/operator/scan","loc":{"line":18,"column":31}},{"name":"rxjs/operator/map","loc":{"line":19,"column":29}},{"name":"rxjs/operator/pluck","loc":{"line":20,"column":33}},{"name":"rxjs/operator/distinctUntilChanged","loc":{"line":21,"column":63}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ɵb = exports.ɵf = exports.ɵe = exports.ɵd = exports.ɵc = exports._createFeatureReducers = exports._createStoreReducers = exports._initialStateFactory = exports.StoreFeatureModule = exports.StoreRootModule = exports._FEATURE_REDUCERS_TOKEN = exports.FEATURE_REDUCERS = exports._FEATURE_REDUCERS = exports._STORE_REDUCERS = exports.META_REDUCERS = exports._INITIAL_STATE = exports.STORE_FEATURES = exports.INITIAL_REDUCERS = exports._INITIAL_REDUCERS = exports.REDUCER_FACTORY = exports._REDUCER_FACTORY = exports.INITIAL_STATE = exports.reduceState = exports.StateObservable = exports.State = exports.createFeatureSelector = exports.createSelector = exports.ScannedActionsSubject = exports.UPDATE = exports.ReducerManagerDispatcher = exports.ReducerObservable = exports.ReducerManager = exports.INIT = exports.ActionsSubject = exports.createReducerFactory = exports.compose = exports.combineReducers = exports.Store = exports.StoreModule = undefined;\n\nvar _core = require(\"@angular/core\");\n\nvar _BehaviorSubject = require(\"rxjs/BehaviorSubject\");\n\nvar _Observable = require(\"rxjs/Observable\");\n\nvar _Subject = require(\"rxjs/Subject\");\n\nvar _queue = require(\"rxjs/scheduler/queue\");\n\nvar _observeOn = require(\"rxjs/operator/observeOn\");\n\nvar _withLatestFrom = require(\"rxjs/operator/withLatestFrom\");\n\nvar _scan = require(\"rxjs/operator/scan\");\n\nvar _map = require(\"rxjs/operator/map\");\n\nvar _pluck = require(\"rxjs/operator/pluck\");\n\nvar _distinctUntilChanged = require(\"rxjs/operator/distinctUntilChanged\");\n\nvar __extends = undefined && undefined.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\n/**\n * @param {?} reducers\n * @param {?=} initialState\n * @return {?}\n */\nfunction combineReducers(reducers, initialState) {\n  if (initialState === void 0) {\n    initialState = {};\n  }\n  var /** @type {?} */reducerKeys = Object.keys(reducers);\n  var /** @type {?} */finalReducers = {};\n  for (var /** @type {?} */i = 0; i < reducerKeys.length; i++) {\n    var /** @type {?} */key = reducerKeys[i];\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key];\n    }\n  }\n  var /** @type {?} */finalReducerKeys = Object.keys(finalReducers);\n  return function combination(state, action) {\n    state = state || initialState;\n    var /** @type {?} */hasChanged = false;\n    var /** @type {?} */nextState = {};\n    for (var /** @type {?} */i = 0; i < finalReducerKeys.length; i++) {\n      var /** @type {?} */key = finalReducerKeys[i];\n      var /** @type {?} */reducer = finalReducers[key];\n      var /** @type {?} */previousStateForKey = state[key];\n      var /** @type {?} */nextStateForKey = reducer(previousStateForKey, action);\n      nextState[key] = nextStateForKey;\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n    }\n    return hasChanged ? nextState : state;\n  };\n}\n/**\n * @template T\n * @param {?} object\n * @param {?} keyToRemove\n * @return {?}\n */\nfunction omit(object, keyToRemove) {\n  return Object.keys(object).filter(function (key) {\n    return key !== keyToRemove;\n  }).reduce(function (result, key) {\n    return Object.assign(result, (_a = {}, _a[key] = object[key], _a));\n    var _a;\n  }, {});\n}\n/**\n * @param {...?} functions\n * @return {?}\n */\nfunction compose() {\n  var functions = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    functions[_i] = arguments[_i];\n  }\n  return function (arg) {\n    if (functions.length === 0) {\n      return arg;\n    }\n    var /** @type {?} */last = functions[functions.length - 1];\n    var /** @type {?} */rest = functions.slice(0, -1);\n    return rest.reduceRight(function (composed, fn) {\n      return fn(composed);\n    }, last(arg));\n  };\n}\n/**\n * @template T, V\n * @param {?} reducerFactory\n * @param {?=} metaReducers\n * @return {?}\n */\nfunction createReducerFactory(reducerFactory, metaReducers) {\n  if (Array.isArray(metaReducers) && metaReducers.length > 0) {\n    return compose.apply(null, metaReducers.concat([reducerFactory]));\n  }\n  return reducerFactory;\n}\nvar _INITIAL_STATE = new _core.InjectionToken('@ngrx/store Internal Initial State');\nvar INITIAL_STATE = new _core.InjectionToken('@ngrx/store Initial State');\nvar REDUCER_FACTORY = new _core.InjectionToken('@ngrx/store Reducer Factory');\nvar _REDUCER_FACTORY = new _core.InjectionToken('@ngrx/store Reducer Factory Provider');\nvar INITIAL_REDUCERS = new _core.InjectionToken('@ngrx/store Initial Reducers');\nvar _INITIAL_REDUCERS = new _core.InjectionToken('@ngrx/store Internal Initial Reducers');\nvar META_REDUCERS = new _core.InjectionToken('@ngrx/store Meta Reducers');\nvar STORE_FEATURES = new _core.InjectionToken('@ngrx/store Store Features');\nvar _STORE_REDUCERS = new _core.InjectionToken('@ngrx/store Internal Store Reducers');\nvar _FEATURE_REDUCERS = new _core.InjectionToken('@ngrx/store Internal Feature Reducers');\nvar _FEATURE_REDUCERS_TOKEN = new _core.InjectionToken('@ngrx/store Internal Feature Reducers Token');\nvar FEATURE_REDUCERS = new _core.InjectionToken('@ngrx/store Feature Reducers');\nvar INIT = '@ngrx/store/init';\nvar ActionsSubject = function (_super) {\n  __extends(ActionsSubject, _super);\n  function ActionsSubject() {\n    return _super.call(this, { type: INIT }) || this;\n  }\n  /**\n   * @param {?} action\n   * @return {?}\n   */\n  ActionsSubject.prototype.next = function (action) {\n    if (typeof action === 'undefined') {\n      throw new TypeError(\"Actions must be objects\");\n    } else if (typeof action.type === 'undefined') {\n      throw new TypeError(\"Actions must have a type property\");\n    }\n    _super.prototype.next.call(this, action);\n  };\n  /**\n   * @return {?}\n   */\n  ActionsSubject.prototype.complete = function () {\n    /* noop */\n  };\n  /**\n   * @return {?}\n   */\n  ActionsSubject.prototype.ngOnDestroy = function () {\n    _super.prototype.complete.call(this);\n  };\n  return ActionsSubject;\n}(_BehaviorSubject.BehaviorSubject);\nActionsSubject.decorators = [{ type: _core.Injectable }];\n/**\n * @nocollapse\n */\nActionsSubject.ctorParameters = function () {\n  return [];\n};\nvar ACTIONS_SUBJECT_PROVIDERS = [ActionsSubject];\n/**\n * @abstract\n */\nvar ReducerObservable = function (_super) {\n  __extends(ReducerObservable, _super);\n  function ReducerObservable() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  return ReducerObservable;\n}(_Observable.Observable);\n/**\n * @abstract\n */\nvar ReducerManagerDispatcher = function (_super) {\n  __extends(ReducerManagerDispatcher, _super);\n  function ReducerManagerDispatcher() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  return ReducerManagerDispatcher;\n}(ActionsSubject);\nvar UPDATE = '@ngrx/store/update-reducers';\nvar ReducerManager = function (_super) {\n  __extends(ReducerManager, _super);\n  /**\n   * @param {?} dispatcher\n   * @param {?} initialState\n   * @param {?} reducers\n   * @param {?} reducerFactory\n   */\n  function ReducerManager(dispatcher, initialState, reducers, reducerFactory) {\n    var _this = _super.call(this, reducerFactory(reducers, initialState)) || this;\n    _this.dispatcher = dispatcher;\n    _this.initialState = initialState;\n    _this.reducers = reducers;\n    _this.reducerFactory = reducerFactory;\n    return _this;\n  }\n  /**\n   * @param {?} __0\n   * @return {?}\n   */\n  ReducerManager.prototype.addFeature = function (_a) {\n    var reducers = _a.reducers,\n        reducerFactory = _a.reducerFactory,\n        metaReducers = _a.metaReducers,\n        initialState = _a.initialState,\n        key = _a.key;\n    var /** @type {?} */reducer = typeof reducers === 'function' ? function (state, action) {\n      return reducers(state || initialState, action);\n    } : createReducerFactory(reducerFactory, metaReducers)(reducers, initialState);\n    this.addReducer(key, reducer);\n  };\n  /**\n   * @param {?} __0\n   * @return {?}\n   */\n  ReducerManager.prototype.removeFeature = function (_a) {\n    var key = _a.key;\n    this.removeReducer(key);\n  };\n  /**\n   * @param {?} key\n   * @param {?} reducer\n   * @return {?}\n   */\n  ReducerManager.prototype.addReducer = function (key, reducer) {\n    this.reducers = Object.assign({}, this.reducers, (_a = {}, _a[key] = reducer, _a));\n    this.updateReducers();\n    var _a;\n  };\n  /**\n   * @param {?} key\n   * @return {?}\n   */\n  ReducerManager.prototype.removeReducer = function (key) {\n    this.reducers = omit(this.reducers, key);\n    this.updateReducers();\n  };\n  /**\n   * @return {?}\n   */\n  ReducerManager.prototype.updateReducers = function () {\n    this.next(this.reducerFactory(this.reducers, this.initialState));\n    this.dispatcher.next({ type: UPDATE });\n  };\n  /**\n   * @return {?}\n   */\n  ReducerManager.prototype.ngOnDestroy = function () {\n    this.complete();\n  };\n  return ReducerManager;\n}(_BehaviorSubject.BehaviorSubject);\nReducerManager.decorators = [{ type: _core.Injectable }];\n/**\n * @nocollapse\n */\nReducerManager.ctorParameters = function () {\n  return [{ type: ReducerManagerDispatcher }, { type: undefined, decorators: [{ type: _core.Inject, args: [INITIAL_STATE] }] }, { type: undefined, decorators: [{ type: _core.Inject, args: [INITIAL_REDUCERS] }] }, { type: undefined, decorators: [{ type: _core.Inject, args: [REDUCER_FACTORY] }] }];\n};\nvar REDUCER_MANAGER_PROVIDERS = [ReducerManager, { provide: ReducerObservable, useExisting: ReducerManager }, { provide: ReducerManagerDispatcher, useExisting: ActionsSubject }];\nvar ScannedActionsSubject = function (_super) {\n  __extends(ScannedActionsSubject, _super);\n  function ScannedActionsSubject() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * @return {?}\n   */\n  ScannedActionsSubject.prototype.ngOnDestroy = function () {\n    this.complete();\n  };\n  return ScannedActionsSubject;\n}(_Subject.Subject);\nScannedActionsSubject.decorators = [{ type: _core.Injectable }];\n/**\n * @nocollapse\n */\nScannedActionsSubject.ctorParameters = function () {\n  return [];\n};\nvar SCANNED_ACTIONS_SUBJECT_PROVIDERS = [ScannedActionsSubject];\n/**\n * @abstract\n */\nvar StateObservable = function (_super) {\n  __extends(StateObservable, _super);\n  function StateObservable() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  return StateObservable;\n}(_Observable.Observable);\nvar State = function (_super) {\n  __extends(State, _super);\n  /**\n   * @param {?} actions$\n   * @param {?} reducer$\n   * @param {?} scannedActions\n   * @param {?} initialState\n   */\n  function State(actions$, reducer$, scannedActions, initialState) {\n    var _this = _super.call(this, initialState) || this;\n    var actionsOnQueue$ = _observeOn.observeOn.call(actions$, _queue.queue);\n    var withLatestReducer$ = _withLatestFrom.withLatestFrom.call(actionsOnQueue$, reducer$);\n    var stateAndAction$ = _scan.scan.call(withLatestReducer$, reduceState, { state: initialState });\n    _this.stateSubscription = stateAndAction$.subscribe({\n      next: function (_a) {\n        var state = _a.state,\n            action = _a.action;\n        _this.next(state);\n        scannedActions.next(action);\n      }\n    });\n    return _this;\n  }\n  /**\n   * @return {?}\n   */\n  State.prototype.ngOnDestroy = function () {\n    this.stateSubscription.unsubscribe();\n    this.complete();\n  };\n  return State;\n}(_BehaviorSubject.BehaviorSubject);\nState.INIT = INIT;\nState.decorators = [{ type: _core.Injectable }];\n/**\n * @nocollapse\n */\nState.ctorParameters = function () {\n  return [{ type: ActionsSubject }, { type: ReducerObservable }, { type: ScannedActionsSubject }, { type: undefined, decorators: [{ type: _core.Inject, args: [INITIAL_STATE] }] }];\n};\n/**\n * @template T, V\n * @param {?=} stateActionPair\n * @param {?=} __1\n * @return {?}\n */\nfunction reduceState(stateActionPair, _a) {\n  if (stateActionPair === void 0) {\n    stateActionPair = { state: undefined };\n  }\n  var action = _a[0],\n      reducer = _a[1];\n  var state = stateActionPair.state;\n  return { state: reducer(state, action), action: action };\n}\nvar STATE_PROVIDERS = [State, { provide: StateObservable, useExisting: State }];\nvar Store = function (_super) {\n  __extends(Store, _super);\n  /**\n   * @param {?} state$\n   * @param {?} actionsObserver\n   * @param {?} reducerManager\n   */\n  function Store(state$, actionsObserver, reducerManager) {\n    var _this = _super.call(this) || this;\n    _this.actionsObserver = actionsObserver;\n    _this.reducerManager = reducerManager;\n    _this.source = state$;\n    return _this;\n  }\n  /**\n   * @param {?} pathOrMapFn\n   * @param {...?} paths\n   * @return {?}\n   */\n  Store.prototype.select = function (pathOrMapFn) {\n    var paths = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      paths[_i - 1] = arguments[_i];\n    }\n    var /** @type {?} */mapped$;\n    if (typeof pathOrMapFn === 'string') {\n      mapped$ = _pluck.pluck.call.apply(_pluck.pluck, [this, pathOrMapFn].concat(paths));\n    } else if (typeof pathOrMapFn === 'function') {\n      mapped$ = _map.map.call(this, pathOrMapFn);\n    } else {\n      throw new TypeError(\"Unexpected type '\" + typeof pathOrMapFn + \"' in select operator,\" + \" expected 'string' or 'function'\");\n    }\n    return _distinctUntilChanged.distinctUntilChanged.call(mapped$);\n  };\n  /**\n   * @template R\n   * @param {?} operator\n   * @return {?}\n   */\n  Store.prototype.lift = function (operator) {\n    var /** @type {?} */store = new Store(this, this.actionsObserver, this.reducerManager);\n    store.operator = operator;\n    return store;\n  };\n  /**\n   * @template V\n   * @param {?} action\n   * @return {?}\n   */\n  Store.prototype.dispatch = function (action) {\n    this.actionsObserver.next(action);\n  };\n  /**\n   * @param {?} action\n   * @return {?}\n   */\n  Store.prototype.next = function (action) {\n    this.actionsObserver.next(action);\n  };\n  /**\n   * @param {?} err\n   * @return {?}\n   */\n  Store.prototype.error = function (err) {\n    this.actionsObserver.error(err);\n  };\n  /**\n   * @return {?}\n   */\n  Store.prototype.complete = function () {\n    this.actionsObserver.complete();\n  };\n  /**\n   * @template State, Actions\n   * @param {?} key\n   * @param {?} reducer\n   * @return {?}\n   */\n  Store.prototype.addReducer = function (key, reducer) {\n    this.reducerManager.addReducer(key, reducer);\n  };\n  /**\n   * @template Key\n   * @param {?} key\n   * @return {?}\n   */\n  Store.prototype.removeReducer = function (key) {\n    this.reducerManager.removeReducer(key);\n  };\n  return Store;\n}(_Observable.Observable);\nStore.decorators = [{ type: _core.Injectable }];\n/**\n * @nocollapse\n */\nStore.ctorParameters = function () {\n  return [{ type: StateObservable }, { type: ActionsSubject }, { type: ReducerManager }];\n};\nvar STORE_PROVIDERS = [Store];\nvar StoreRootModule = function () {\n  /**\n   * @param {?} actions$\n   * @param {?} reducer$\n   * @param {?} scannedActions$\n   */\n  function StoreRootModule(actions$, reducer$, scannedActions$) {}\n  return StoreRootModule;\n}();\nStoreRootModule.decorators = [{ type: _core.NgModule, args: [{}] }];\n/**\n * @nocollapse\n */\nStoreRootModule.ctorParameters = function () {\n  return [{ type: ActionsSubject }, { type: ReducerObservable }, { type: ScannedActionsSubject }];\n};\nvar StoreFeatureModule = function () {\n  /**\n   * @param {?} features\n   * @param {?} featureReducers\n   * @param {?} reducerManager\n   */\n  function StoreFeatureModule(features, featureReducers, reducerManager) {\n    this.features = features;\n    this.featureReducers = featureReducers;\n    this.reducerManager = reducerManager;\n    features.map(function (feature, index) {\n      var featureReducerCollection = featureReducers.shift();\n      var reducers = featureReducerCollection[index];\n      return Object.assign({}, feature, { reducers: reducers, initialState: _initialStateFactory(feature.initialState) });\n    }).forEach(function (feature) {\n      return reducerManager.addFeature(feature);\n    });\n  }\n  /**\n   * @return {?}\n   */\n  StoreFeatureModule.prototype.ngOnDestroy = function () {\n    var _this = this;\n    this.features.forEach(function (feature) {\n      return _this.reducerManager.removeFeature(feature);\n    });\n  };\n  return StoreFeatureModule;\n}();\nStoreFeatureModule.decorators = [{ type: _core.NgModule, args: [{}] }];\n/**\n * @nocollapse\n */\nStoreFeatureModule.ctorParameters = function () {\n  return [{ type: Array, decorators: [{ type: _core.Inject, args: [STORE_FEATURES] }] }, { type: Array, decorators: [{ type: _core.Inject, args: [FEATURE_REDUCERS] }] }, { type: ReducerManager }];\n};\nvar StoreModule = function () {\n  function StoreModule() {}\n  /**\n   * @param {?} reducers\n   * @param {?=} config\n   * @return {?}\n   */\n  StoreModule.forRoot = function (reducers, config) {\n    if (config === void 0) {\n      config = {};\n    }\n    return {\n      ngModule: StoreRootModule,\n      providers: [{ provide: _INITIAL_STATE, useValue: config.initialState }, {\n        provide: INITIAL_STATE,\n        useFactory: _initialStateFactory,\n        deps: [_INITIAL_STATE]\n      }, { provide: _INITIAL_REDUCERS, useValue: reducers }, {\n        provide: _STORE_REDUCERS,\n        useExisting: reducers instanceof _core.InjectionToken ? reducers : _INITIAL_REDUCERS\n      }, {\n        provide: INITIAL_REDUCERS,\n        deps: [_core.Injector, _INITIAL_REDUCERS, [new _core.Inject(_STORE_REDUCERS)]],\n        useFactory: _createStoreReducers\n      }, {\n        provide: META_REDUCERS,\n        useValue: config.metaReducers ? config.metaReducers : []\n      }, {\n        provide: _REDUCER_FACTORY,\n        useValue: config.reducerFactory ? config.reducerFactory : combineReducers\n      }, {\n        provide: REDUCER_FACTORY,\n        deps: [_REDUCER_FACTORY, META_REDUCERS],\n        useFactory: createReducerFactory\n      }, ACTIONS_SUBJECT_PROVIDERS, REDUCER_MANAGER_PROVIDERS, SCANNED_ACTIONS_SUBJECT_PROVIDERS, STATE_PROVIDERS, STORE_PROVIDERS]\n    };\n  };\n  /**\n   * @param {?} featureName\n   * @param {?} reducers\n   * @param {?=} config\n   * @return {?}\n   */\n  StoreModule.forFeature = function (featureName, reducers, config) {\n    if (config === void 0) {\n      config = {};\n    }\n    return {\n      ngModule: StoreFeatureModule,\n      providers: [{\n        provide: STORE_FEATURES,\n        multi: true,\n        useValue: /** @type {?} */{\n          key: featureName,\n          reducerFactory: config.reducerFactory ? config.reducerFactory : combineReducers,\n          metaReducers: config.metaReducers ? config.metaReducers : [],\n          initialState: config.initialState\n        }\n      }, { provide: _FEATURE_REDUCERS, multi: true, useValue: reducers }, {\n        provide: _FEATURE_REDUCERS_TOKEN,\n        multi: true,\n        useExisting: reducers instanceof _core.InjectionToken ? reducers : _FEATURE_REDUCERS\n      }, {\n        provide: FEATURE_REDUCERS,\n        multi: true,\n        deps: [_core.Injector, _FEATURE_REDUCERS, [new _core.Inject(_FEATURE_REDUCERS_TOKEN)]],\n        useFactory: _createFeatureReducers\n      }]\n    };\n  };\n  return StoreModule;\n}();\nStoreModule.decorators = [{ type: _core.NgModule, args: [{}] }];\n/**\n * @nocollapse\n */\nStoreModule.ctorParameters = function () {\n  return [];\n};\n/**\n * @param {?} injector\n * @param {?} reducers\n * @param {?} tokenReducers\n * @return {?}\n */\nfunction _createStoreReducers(injector, reducers, tokenReducers) {\n  return reducers instanceof _core.InjectionToken ? injector.get(reducers) : reducers;\n}\n/**\n * @param {?} injector\n * @param {?} reducerCollection\n * @param {?} tokenReducerCollection\n * @return {?}\n */\nfunction _createFeatureReducers(injector, reducerCollection, tokenReducerCollection) {\n  return reducerCollection.map(function (reducer, index) {\n    return reducer instanceof _core.InjectionToken ? injector.get(reducer) : reducer;\n  });\n}\n/**\n * @param {?} initialState\n * @return {?}\n */\nfunction _initialStateFactory(initialState) {\n  if (typeof initialState === 'function') {\n    return initialState();\n  }\n  return initialState;\n}\n/**\n * @param {?} t\n * @return {?}\n */\nfunction memoize(t) {\n  var /** @type {?} */lastArguments = null;\n  var /** @type {?} */lastResult = null;\n  /**\n   * @return {?}\n   */\n  function reset() {\n    lastArguments = null;\n    lastResult = null;\n  }\n  /**\n   * @return {?}\n   */\n  function memoized() {\n    if (!lastArguments) {\n      lastResult = t.apply(null, arguments);\n      lastArguments = arguments;\n      return lastResult;\n    }\n    for (var /** @type {?} */i = 0; i < arguments.length; i++) {\n      if (arguments[i] !== lastArguments[i]) {\n        lastResult = t.apply(null, arguments);\n        lastArguments = arguments;\n        return lastResult;\n      }\n    }\n    return lastResult;\n  }\n  return { memoized: memoized, reset: reset };\n}\n/**\n * @param {...?} input\n * @return {?}\n */\nfunction createSelector() {\n  var input = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    input[_i] = arguments[_i];\n  }\n  var /** @type {?} */args = input;\n  if (Array.isArray(args[0])) {\n    var head = args[0],\n        tail = args.slice(1);\n    args = head.concat(tail);\n  }\n  var /** @type {?} */selectors = args.slice(0, args.length - 1);\n  var /** @type {?} */projector = args[args.length - 1];\n  var /** @type {?} */memoizedSelectors = selectors.filter(function (selector) {\n    return selector.release && typeof selector.release === 'function';\n  });\n  var /** @type {?} */memoizedProjector = memoize(function () {\n    var selectors = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      selectors[_i] = arguments[_i];\n    }\n    return projector.apply(null, selectors);\n  });\n  var /** @type {?} */memoizedState = memoize(function (state) {\n    var /** @type {?} */args = selectors.map(function (fn) {\n      return fn(state);\n    });\n    return memoizedProjector.memoized.apply(null, args);\n  });\n  /**\n   * @return {?}\n   */\n  function release() {\n    memoizedState.reset();\n    memoizedProjector.reset();\n    memoizedSelectors.forEach(function (selector) {\n      return selector.release();\n    });\n  }\n  return Object.assign(memoizedState.memoized, {\n    release: release,\n    projector: memoizedProjector.memoized\n  });\n}\n/**\n * @template T\n * @param {?} featureName\n * @return {?}\n */\nfunction createFeatureSelector(featureName) {\n  var _a = memoize(function (state) {\n    return state[featureName];\n  }),\n      memoized = _a.memoized,\n      reset = _a.reset;\n  return Object.assign(memoized, { release: reset, projector: memoized });\n}\n/**\n * Generated bundle index. Do not edit.\n */\nexports.StoreModule = StoreModule;\nexports.Store = Store;\nexports.combineReducers = combineReducers;\nexports.compose = compose;\nexports.createReducerFactory = createReducerFactory;\nexports.ActionsSubject = ActionsSubject;\nexports.INIT = INIT;\nexports.ReducerManager = ReducerManager;\nexports.ReducerObservable = ReducerObservable;\nexports.ReducerManagerDispatcher = ReducerManagerDispatcher;\nexports.UPDATE = UPDATE;\nexports.ScannedActionsSubject = ScannedActionsSubject;\nexports.createSelector = createSelector;\nexports.createFeatureSelector = createFeatureSelector;\nexports.State = State;\nexports.StateObservable = StateObservable;\nexports.reduceState = reduceState;\nexports.INITIAL_STATE = INITIAL_STATE;\nexports._REDUCER_FACTORY = _REDUCER_FACTORY;\nexports.REDUCER_FACTORY = REDUCER_FACTORY;\nexports._INITIAL_REDUCERS = _INITIAL_REDUCERS;\nexports.INITIAL_REDUCERS = INITIAL_REDUCERS;\nexports.STORE_FEATURES = STORE_FEATURES;\nexports._INITIAL_STATE = _INITIAL_STATE;\nexports.META_REDUCERS = META_REDUCERS;\nexports._STORE_REDUCERS = _STORE_REDUCERS;\nexports._FEATURE_REDUCERS = _FEATURE_REDUCERS;\nexports.FEATURE_REDUCERS = FEATURE_REDUCERS;\nexports._FEATURE_REDUCERS_TOKEN = _FEATURE_REDUCERS_TOKEN;\nexports.StoreRootModule = StoreRootModule;\nexports.StoreFeatureModule = StoreFeatureModule;\nexports._initialStateFactory = _initialStateFactory;\nexports._createStoreReducers = _createStoreReducers;\nexports._createFeatureReducers = _createFeatureReducers;\nexports.ɵc = ACTIONS_SUBJECT_PROVIDERS;\nexports.ɵd = REDUCER_MANAGER_PROVIDERS;\nexports.ɵe = SCANNED_ACTIONS_SUBJECT_PROVIDERS;\nexports.ɵf = STATE_PROVIDERS;\nexports.ɵb = STORE_PROVIDERS;\n//# sourceMappingURL=store.es5.js.map"},"hash":"915b8910ecd1e74de4714b422c6e8a83"}